d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
source('~/.active-rstudio-document', echo=TRUE)
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', type = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
set.seed (123)
d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'both')
set.seed (123)
d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'both')
d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'modif')
scen3.slope <- replicated (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
scen3.slope <- replicate (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
scen3.slope
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
scen3.slope <- replicate (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
scen3.slope
scen3.lm <- replicate (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
scen3.lm
scen3.lm <- replicate (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'lm', test = 'modif')$modif.P})
scen3.lm
replicate (10, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen1 <- replicate (10, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen2 <- replicate (10, {d <- simul.RLQ (scenario = 2); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen3 <- replicate (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen4 <- replicate (10, {d <- simul.RLQ (scenario = 4); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
modif.scen1 <- replicate (10, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
modif.scen2 <- replicate (10, {d <- simul.RLQ (scenario = 2); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
modif.scen3 <- replicate (10, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
modif.scen4 <- replicate (10, {d <- simul.RLQ (scenario = 4); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
sum (stand.scen1 < 0.05)/10
sum (stand.scen1 < 0.05)/10
sum (stand.scen2 < 0.05)/10
sum (stand.scen3 < 0.05)/10
sum (stand.scen4 < 0.05)/10
sum (modif.scen1 < 0.05)/10
sum (modif.scen2 < 0.05)/10
sum (modif.scen3 < 0.05)/10
sum (modif.scen4 < 0.05)/10
parReplicate <- function(cl, n, expr, simplify=TRUE, USE.NAMES=TRUE)
parSapply(cl, integer(n), function(i, ex) eval(ex, envir=.GlobalEnv),
substitute(expr), simplify=simplify, USE.NAMES=USE.NAMES)
stand.scen1 <- parReplicate (cl, 100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
library (parallel)
?parSapply
cl <- makeCluster(4)
stand.scen1 <- parReplicate (cl, 100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
clusterEvalQ (cl, library (weimea))
clusterEvalQ (cl, library (weimea))
stand.scen1 <- parReplicate (cl, 100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen1 <- replicate (100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen1 <- replicate (100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen2 <- replicate (100, {d <- simul.RLQ (scenario = 2); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen3 <- replicate (100, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen4 <- replicate (100, {d <- simul.RLQ (scenario = 4); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
modif.scen1 <- replicate (100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
modif.scen2 <- replicate (100, {d <- simul.RLQ (scenario = 2); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
modif.scen3 <- replicate (100, {d <- simul.RLQ (scenario = 3); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
modif.scen4 <- replicate (100, {d <- simul.RLQ (scenario = 4); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'modif')$modif.P})
sum (stand.scen1 < 0.05)/100
sum (stand.scen2 < 0.05)/100
sum (stand.scen3 < 0.05)/100
sum (stand.scen4 < 0.05)/100
sum (modif.scen1 < 0.05)/100
sum (modif.scen2 < 0.05)/100
sum (modif.scen3 < 0.05)/100
sum (modif.scen4 < 0.05)/100
lm
?lm
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
stand.scen1 <- replicate (100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen1 <- replicate (10, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen1
stand.scen1 <- replicate (10, {d <- simul.RLQ (scenario = 2); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
library (ade4)
d <- simul.RLQ ()
?fourthcorner
fourthcorner (tabR = d$speatt, tabL = t(d$sitspe)), tabQ = d$env)
fourthcorner (tabR = d$speatt, tabL = t(d$sitspe)), tabQ = d$env)
fourthcorner (tabR = d$speatt, tabL = t(d$sitspe), tabQ = d$env)
fourthcorner (tabR = as.data.frame (d$speatt), tabL = as.data.frame (t(d$sitspe)), tabQ = as.data.frame (d$env))
as.data.frame (d$speatt)
as.data.frame (t(d$sitspe))
as.data.frame (d$env)
fourthcorner (tabR = as.data.frame (d$speatt), tabL = as.data.frame (t(d$sitspe)), tabQ = as.data.frame (d$env))
fourthcorner (tabR = aravo$traits, tabL = aravo$sitspe, tabQ = aravo$env)
data (aravo)
fourthcorner (tabR = aravo$traits, tabL = aravo$sitspe, tabQ = aravo$env)
aravo$traits
aravo$sitspe
fourthcorner (tabR = aravo$traits, tabL = aravo$spe, tabQ = aravo$env)
aravo$spe
aravo$env
fourthcorner (tabR = aravo$traits, tabL = t(aravo$spe), tabQ = aravo$env)
fourthcorner (tabR = aravo$traits, tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env)
fourthcorner (tabR = aravo$traits[,1], tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1])
fourthcorner (tabR = aravo$traits[,1, drop = F], tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1, drop = F])
fourthcorner (tabR = aravo$traits[,1, drop = F], tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1:2, drop = F])
mopet (wm (aravo$spe, aravo$traits[,1]), aravo$env[,1])
mopet (wm (aravo$spe, aravo$traits[,1]), aravo$env[,1], method = 'slope')
fourthcorner (tabR = aravo$traits, tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1:2, drop = F])
mopet (wm (aravo$spe, aravo$traits), aravo$env[,1], method = 'slope')
mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
fc <- fourthcorner (tabR = aravo$traits, tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1:2, drop = F])
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
fc
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
wei
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
wei
source('~/.active-rstudio-document', echo=TRUE)
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
wei
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
wei
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
wei
fc
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,1, drop = F], method = 'slope')
wei
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,2, drop = F], method = 'slope')
wei
wei <- mopet (wm (aravo$spe, aravo$traits), aravo$env[,2, drop = F], method = 'lm')
wei
wei <- mopet (wm (aravo$spe, scale (aravo$traits)), aravo$env[,2, drop = F], method = 'lm')
wei
fc
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/mopet.r', echo=TRUE)
wei <- mopet (wm (aravo$spe, scale (aravo$traits)), aravo$env[,2, drop = F], method = 'slope')
wei
wei <- mopet (wm (aravo$spe, scale (aravo$traits)), scale (aravo$env[,2, drop = F]), method = 'slope')
wei
fc
fc <- fourthcorner (tabR = aravo$traits[,1], tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1:2, drop = F])
fc <- fourthcorner (tabR = aravo$traits[,1, drop = F], tabL = as.data.frame (t(aravo$spe)), tabQ = aravo$env[,1:2, drop = F])
fc
wm (aravo$spe, aravo$traits[,1])
lm (wm (aravo$spe, aravo$traits[,1]) ~ aravo$env[,1])
fc
lm (wm (aravo$spe, aravo$traits[,1]) ~ aravo$env[,1], weights = rowSums (aravo$spe))
lm (scale (wm (aravo$spe, aravo$traits[,1])) ~ aravo$env[,1], weights = rowSums (aravo$spe))
lm ((wm (aravo$spe, scale (aravo$traits[,1]))) ~ aravo$env[,1], weights = rowSums (aravo$spe))
rowSums (aravo$spe)
fc <- fourthcorner (tabR = aravo$env[,1, drop = F], tabL = as.data.frame ((aravo$spe)), tabQ = aravo$traits[,1:2, drop = F])
fc
lm ((wm (t(aravo$spe), scale (aravo$env[,1])))~ aravo$traits[,1])
lm ((wm (t(aravo$spe), scale (aravo$env[,1])))~ aravo$traits[,1], weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,1])))~ aravo$traits[,1], weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,1])))~ aravo$traits[,1], weights = rowSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,1])))~ aravo$traits[,1], weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe), scale (aravo$env[,1])))~ aravo$traits[,1], weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe), scale (aravo$env[,1])))~ scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,1])))~ scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  scale(aravo$env[,1])))~ scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  scale(aravo$env[,2])))~ scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  scale(aravo$env[,2])))~ scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm (scale(wm (t(aravo$spe),  (aravo$env[,2])))~ scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm (scale(wm (t(aravo$spe),  (aravo$env[,2])))~  (aravo$traits[,1]), weights = colSums (aravo$spe))
lm (scale(wm (t(aravo$spe),  (aravo$env[,2])))~  scale (aravo$traits[,1]), weights = colSums (aravo$spe))
lm (scale(wm (t(aravo$spe),  (aravo$env[,2])))~   (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,2])))~   (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,2])))~   scale(aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  (aravo$env[,1])))~   scale(aravo$traits[,1]), weights = colSums (aravo$spe))
fc
lm (scale(wm (t(aravo$spe),  (aravo$env[,1])))~   (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  scale(aravo$env[,1])))~   (aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  scale(aravo$env[,1])))~   scale(aravo$traits[,1]), weights = colSums (aravo$spe))
lm (scale(wm (t(aravo$spe),  (aravo$env[,1])))~   scale(aravo$traits[,1]), weights = colSums (aravo$spe))
lm ((wm (t(aravo$spe),  scale(aravo$env[,1])))~   scale(aravo$traits[,1]), weights = colSums (aravo$spe))
R <- aravo$env[,1, env = F]
L <- aravo$spe
Q <- aravo$traits[,1, drop = F]
R <- aravo$env[,1, drop = F]
wm (L, R)
wm (t(L), R)
L <- decostand (aravo$spe, 'pa')
Q <- aravo$traits[,1, drop = F]
R <- aravo$env[,1, drop = F]
wm (t(L), R)
lm (wm (t(L), R) ~ Q)
lm (wm (t(L), R) ~ as.matrix (Q))
fourthcorner (tabR = R, tabL = L, tabQ = Q)
Q <- aravo$traits[,1:2, drop = F]
fourthcorner (tabR = R, tabL = L, tabQ = Q)
lm (wm (t(L), R) ~ as.matrix (Q), weights = colSums (L))
lm (wm (t(L), R) ~ as.matrix (Q[,1]), weights = colSums (L))
lm (wm (t(L), R) ~ as.matrix (Q[,1]), weights = colSums (L))
fourthcorner (tabR = R, tabL = L, tabQ = Q)
lm (scale (wm (t(L), R)) ~ as.matrix (Q[,1]), weights = colSums (L))
lm ( (wm (t(L), scale (R))) ~ as.matrix (Q[,1]), weights = colSums (L))
lm ((wm (t(L), scale (R))) ~ as.matrix (Q[,1]))
lm ((wm (t(L), scale (R))) ~ scale (as.matrix (Q[,1])), weights = colSums (L))
lm ((wm (t(L),  (R))) ~ scale (as.matrix (Q[,1])), weights = colSums (L))
lm (scale(wm (t(L),  (R))) ~ scale (as.matrix (Q[,1])), weights = colSums (L))
lm ((wm (t(L),  (R))) ~ scale (as.matrix (Q[,1])), weights = colSums (L))
lm ((wm (t(L), scale (R))) ~ scale (as.matrix (Q[,1])), weights = colSums (L))
lm ((wm (t(L), scale (R))) ~ scale (as.matrix (Q[,2])), weights = colSums (L))
fourthcorner (tabR = R, tabL = L, tabQ = Q)
L <- decostand (aravo$spe, 'pa')
Q <- aravo$traits[,1:2, drop = F]
R <- aravo$env[,1, drop = F]
lm ((wm (t(L), scale (R))) ~ scale (as.matrix (Q[,2])), weights = colSums (L))
fourthcorner (tabR = R, tabL = L, tabQ = Q)
lm ((wm (t(L),  (R))) ~ scale (as.matrix (Q[,2])), weights = colSums (L))
lm (scale(wm (t(L),  (R))) ~ scale (as.matrix (Q[,2])), weights = colSums (L))
lm (scale(wm (t(L),  (R))) ~  (as.matrix (Q[,2])), weights = colSums (L))
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,2])), weights = colSums (L))
Q <- aravo$traits[, drop = F]
Q <- aravo$traits[,, drop = F]
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,2])), weights = colSums (L))
fourthcorner (tabR = R, tabL = L, tabQ = Q)
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,3])), weights = colSums (L))
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,4])), weights = colSums (L))
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,5])), weights = colSums (L))
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,6])), weights = colSums (L))
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,7])), weights = colSums (L))
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,8])), weights = colSums (L))
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
summary (fc)
str (fc)
lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])), weights = colSums (L))
summary (fc)
print (fc)
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,1, drop = F]
dim (Q)
coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])), weights = colSums (L)))[2])
coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])), weights = colSums (L)))
)
coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])), weights = colSums (L)))[2,1])
coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])), weights = colSums (L))))
coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])), weights = colSums (L))))[2,1]
coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,1])))))[2,1]
foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1]
library (foreach)
foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
slope
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
str (fc)
fc$tabD$obs
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,2, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,3, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,4, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
par (mfrow = c(2,2))
par (mfrow = c(2,2))
for (e in c(1,2,4,5))
{
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,e, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
}
par (mfrow = c(2,2))
for (e in c(1,2,4,6))
{
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,e, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
}
abline (0,1)
par (mfrow = c(2,2))
for (e in c(1,2,4,6))
{
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,e, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
abline (0,1)
}
abline (0,1, col = 'grey')
par (mfrow = c(2,2))
for (e in c(1,2,4,6))
{
L <- decostand (aravo$spe, 'pa')  # transformed to presence-absence data
Q <- aravo$traits[,, drop = F]
R <- aravo$env[,e, drop = F]
slope <- unlist (foreach (i = 1:8) %do% coef (summary (lm ((wm (t(L),  scale(R))) ~  scale(as.matrix (Q[,i])), weights = colSums (L))))[2,1])
fc <- fourthcorner (tabR = R, tabL = L, tabQ = Q)
r.4th <- fc$tabD$obs
plot (r.4th ~ slope)
abline (0,1, col = 'grey')
}
# the values of slope and r (fouthcorner) are very similar, but not EXACTLY the same (not sure why)
library(weimea)
sum (stand.scen1 < 0.05)/100
sum (stand.scen2 < 0.05)/100
sum (stand.scen3 < 0.05)/100
sum (stand.scen4 < 0.05)/100
sum (modif.scen1 < 0.05)/100
sum (modif.scen2 < 0.05)/100
sum (modif.scen3 < 0.05)/100
sum (modif.scen4 < 0.05)/100
stand.scen1 <- replicate (10, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
stand.scen1 <- replicate (100, {d <- simul.RLQ (scenario = 1); mopet (wm (d$sitspe, d$speatt), d$env, method = 'slope', test = 'stand')$perm.P})
sum (stand.scen1 < 0.05)/100
sum (stand.scen2 < 0.05)/100
sum (stand.scen3 < 0.05)/100
sum (stand.scen4 < 0.05)/100
sum (modif.scen1 < 0.05)/100
sum (modif.scen2 < 0.05)/100
sum (modif.scen3 < 0.05)/100
sum (modif.scen4 < 0.05)/100
# behaves similar to the fourth corner (modif test on scenario 3 has inflated Type I error rate)
?test.LR
test.LR (wm (aravo$sitspe, aravo$traits), aravo$env)
test.LR (wm (aravo$spe, aravo$traits), aravo$env)
te <- test.LR (wm (aravo$spe, aravo$traits), aravo$env[,1])
te
str (te)
summary (te)
te
te$P
str(te)
te[[1]]
te[[1]]$anova
te[[1]]$env$anova
te
te <- test.LR (wm (aravo$spe, aravo$traits), aravo$env[,1:2])
te
data (vltava)
test.LR (M = wm (vltava$spe, vltava$ell), vltava$env, alpha = 0.05)
# replicate (10, simul.RLQ (scenario = 3))
replicate (10, simul.RLQ (scenario = 3))
sce3 <- replicate (10, simul.RLQ (scenario = 3))
str (sce3)
sce3 <- replicate (10, list (simul.RLQ (scenario = 3)))
str (sce3)
lapply (sce3, FUN = function (x) test.LQ (wm (x$sitspe, x$speatt), env = x$env)
lapply (sce3, FUN = function (x) test.LQ (wm (x$sitspe, x$speatt), env = x$env))
lapply (sce3, FUN = function (x) test.LQ (wm (x$sitspe, x$speatt), env = x$env))
lapply (sce3, FUN = function (x) test.LR (wm (x$sitspe, x$speatt), env = x$env))
x <- sce3[[1]]
x
wm (x$sitspe, x$speatt)
test.LR (wm (x$sitspe, x$speatt), env = x$env)
x$env
test.LR (wm (x$sitspe, x$speatt), env = x$env)
lapply (sce3, FUN = function (x) test.LR (wm (x$sitspe, x$speatt), env = as.matrix (x$env)))
test.LR (wm (x$sitspe, x$speatt), env = as.matrix (x$env))
?test.LR
x$env
wm (x$sitspe, x$speatt)
test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env))
lapply (sce3, FUN = function (x) test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))
d
wm (d$sitspe, d$speatt)
wm (d$sitspe, d$speatt)
mopet (wm (d$sitspe, d$speatt), d$env)
test.LR (wm (d$sitspe, d$speatt), d$env)
print.default (test.LR (wm (d$sitspe, d$speatt), d$env))
summary.default (test.LR (wm (d$sitspe, d$speatt), d$env))
d$env
M <- wm (d$sitspe, d$speatt)
env <- d$env
alpha <- 0.001
sqrt = F
type = 'dbRDA'
if (!is.wm (M)) stop ("Argument M must be an object of class 'wm'!")
env <- as.matrix (env)
if (is.null(colnames (env))) colnames (env) <- 'env'
env
res <- list ()
colnames (M)
M
is.null(colnames (M)
)
if (!is.wm (M)) stop ("Argument M must be an object of class 'wm'!")
env <- as.matrix (env)
if (is.null(colnames (env))) colnames (env) <- 'env'
if (is.null(colnames (M))) colnames (M) <- 'speatt'
res <- list ()
for (co.M in colnames (M))
for (co.env in colnames (env))
res [[co.M]][[co.env]] <- test.LR.0 (M = M[,co.M], env = env[,co.env], type = type, alpha = alpha, sqrt = sqrt)
class (res) <- 'testLR'
test.LR.0 <- function (M, env, type = 'dbRDA', alpha = 0.001, sqrt = F)
{
sitspe <- attr (M, 'sitspe')
speatt <- attr (M, 'speatt')
sitspe.temp <- sitspe[, !is.na (speatt)]
if (sqrt) pcoa.temp <- capscale (sqrt (ia (sitspe.temp)) ~ env) else pcoa.temp <- capscale (ia (sitspe.temp) ~ env)
anova.temp <- anova (pcoa.temp, alpha = alpha)
res <- list (pcoa = pcoa.temp, anova = anova.temp)
return (res)
}
for (co.M in colnames (M))
for (co.env in colnames (env))
res [[co.M]][[co.env]] <- test.LR.0 (M = M[,co.M], env = env[,co.env], type = type, alpha = alpha, sqrt = sqrt)
speatt [,j, drop = F]
co.M
co.env
M[,co.M]
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/test.LR.r', echo=TRUE)
d
simul.RLQ ()
library(weimea)
sce3 <- replicate (10, list (simul.RLQ (scenario = 3)))
lapply (sce3, FUN = function (x) test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))
test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env))
lapply (sce3, FUN = function (x) test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))
unlist (lapply (sce3, FUN = function (x) test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env))))
res3 <- lapply (sce3, FUN = function (x) test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))
res3
res3[[1]]
str (res3[[1]])
str (print (res3[[1]]))
print (res3[[1]])[2]
?test.LQ
?test.LR
?coef
res3[[1]]
str (res3[[1]])
source('C:/Users/Zeleny/Dropbox/experimenty/R libraries/weimea/pkg/R/test.LR.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sce3
res3
sce3 <- replicate (10, list (simul.RLQ (scenario = 1)))
res3 <- lapply (sce3, FUN = function (x) test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))
res3
res3[[1]]
print (res3[[1]])[2]
res3 <- lapply (sce3, FUN = function (x) print (test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))[2])
res3
sce3 <- replicate (10, list (simul.RLQ (scenario = 3)))
res3 <- lapply (sce3, FUN = function (x) print (test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))[2])
res3
sce3 <- replicate (10, list (simul.RLQ (scenario = 3)))
res3 <- lapply (sce3, FUN = function (x) as.numeric (print (test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))[2]))
res3
unlist (res3)
sce3 <- replicate (100, list (simul.RLQ (scenario = 3)))
res3 <- lapply (sce3, FUN = function (x) as.numeric (print (test.LR (M = wm (x$sitspe, x$speatt), env = as.matrix (x$env)))[2]))
unlist (res3)
sum (unlist (res3) < 0.05)
which (unlist (res3) < 0.05)
sce3[[19]]
d <- sce3[[19]]
mopet (wm (d$sitspe, d$speatt), d$env)
mopet (wm (d$sitspe, d$speatt), d$env, test = 'both')
d <- sce3[[20]]
mopet (wm (d$sitspe, d$speatt), d$env, test = 'both')
unlist (res3)
which (unlist (res3) < 0.05)
d <- sce3[[31]]
mopet (wm (d$sitspe, d$speatt), d$env, test = 'both')
d <- sce3[[49]]
mopet (wm (d$sitspe, d$speatt), d$env, test = 'both')
d <- sce3[[62]]
mopet (wm (d$sitspe, d$speatt), d$env, test = 'both')
library(weimea)
example (test.LR)
test.LR (M = wm (vltava$spe, vltava$ell)[,1], vltava$env$pH.H, type = 'moran')
test.LR (M = wm (vltava$spe, vltava$ell), vltava$env, type = 'moran')
